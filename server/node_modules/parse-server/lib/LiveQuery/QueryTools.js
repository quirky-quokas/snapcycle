"use strict";

var equalObjects = require('./equalObjects');

var Id = require('./Id');

var Parse = require('parse/node');
/**
 * Query Hashes are deterministic hashes for Parse Queries.
 * Any two queries that have the same set of constraints will produce the same
 * hash. This lets us reliably group components by the queries they depend upon,
 * and quickly determine if a query has changed.
 */

/**
 * Convert $or queries into an array of where conditions
 */


function flattenOrQueries(where) {
  if (!where.hasOwnProperty('$or')) {
    return where;
  }

  var accum = [];

  for (var i = 0; i < where.$or.length; i++) {
    accum = accum.concat(where.$or[i]);
  }

  return accum;
}
/**
 * Deterministically turns an object into a string. Disregards ordering
 */


function stringify(object) {
  if (typeof object !== 'object' || object === null) {
    if (typeof object === 'string') {
      return '"' + object.replace(/\|/g, '%|') + '"';
    }

    return object + '';
  }

  if (Array.isArray(object)) {
    var copy = object.map(stringify);
    copy.sort();
    return '[' + copy.join(',') + ']';
  }

  var sections = [];
  var keys = Object.keys(object);
  keys.sort();

  for (var k = 0; k < keys.length; k++) {
    sections.push(stringify(keys[k]) + ':' + stringify(object[keys[k]]));
  }

  return '{' + sections.join(',') + '}';
}
/**
 * Generate a hash from a query, with unique fields for columns, values, order,
 * skip, and limit.
 */


function queryHash(query) {
  if (query instanceof Parse.Query) {
    query = {
      className: query.className,
      where: query._where
    };
  }

  var where = flattenOrQueries(query.where || {});
  var columns = [];
  var values = [];
  var i;

  if (Array.isArray(where)) {
    var uniqueColumns = {};

    for (i = 0; i < where.length; i++) {
      var subValues = {};
      var keys = Object.keys(where[i]);
      keys.sort();

      for (var j = 0; j < keys.length; j++) {
        subValues[keys[j]] = where[i][keys[j]];
        uniqueColumns[keys[j]] = true;
      }

      values.push(subValues);
    }

    columns = Object.keys(uniqueColumns);
    columns.sort();
  } else {
    columns = Object.keys(where);
    columns.sort();

    for (i = 0; i < columns.length; i++) {
      values.push(where[columns[i]]);
    }
  }

  var sections = [columns.join(','), stringify(values)];
  return query.className + ':' + sections.join('|');
}
/**
 * contains -- Determines if an object is contained in a list with special handling for Parse pointers.
 */


function contains(haystack, needle) {
  if (needle && needle.__type && needle.__type === 'Pointer') {
    for (const i in haystack) {
      const ptr = haystack[i];

      if (typeof ptr === 'string' && ptr === needle.objectId) {
        return true;
      }

      if (ptr.className === needle.className && ptr.objectId === needle.objectId) {
        return true;
      }
    }

    return false;
  }

  return haystack.indexOf(needle) > -1;
}
/**
 * matchesQuery -- Determines if an object would be returned by a Parse Query
 * It's a lightweight, where-clause only implementation of a full query engine.
 * Since we find queries that match objects, rather than objects that match
 * queries, we can avoid building a full-blown query tool.
 */


function matchesQuery(object, query) {
  if (query instanceof Parse.Query) {
    var className = object.id instanceof Id ? object.id.className : object.className;

    if (className !== query.className) {
      return false;
    }

    return matchesQuery(object, query._where);
  }

  for (var field in query) {
    if (!matchesKeyConstraints(object, field, query[field])) {
      return false;
    }
  }

  return true;
}

function equalObjectsGeneric(obj, compareTo, eqlFn) {
  if (Array.isArray(obj)) {
    for (var i = 0; i < obj.length; i++) {
      if (eqlFn(obj[i], compareTo)) {
        return true;
      }
    }

    return false;
  }

  return eqlFn(obj, compareTo);
}
/**
 * Determines whether an object matches a single key's constraints
 */


function matchesKeyConstraints(object, key, constraints) {
  if (constraints === null) {
    return false;
  }

  if (key.indexOf('.') >= 0) {
    // Key references a subobject
    var keyComponents = key.split('.');
    var subObjectKey = keyComponents[0];
    var keyRemainder = keyComponents.slice(1).join('.');
    return matchesKeyConstraints(object[subObjectKey] || {}, keyRemainder, constraints);
  }

  var i;

  if (key === '$or') {
    for (i = 0; i < constraints.length; i++) {
      if (matchesQuery(object, constraints[i])) {
        return true;
      }
    }

    return false;
  }

  if (key === '$relatedTo') {
    // Bail! We can't handle relational queries locally
    return false;
  } // Decode Date JSON value


  if (object[key] && object[key].__type == 'Date') {
    object[key] = new Date(object[key].iso);
  } // Equality (or Array contains) cases


  if (typeof constraints !== 'object') {
    if (Array.isArray(object[key])) {
      return object[key].indexOf(constraints) > -1;
    }

    return object[key] === constraints;
  }

  var compareTo;

  if (constraints.__type) {
    if (constraints.__type === 'Pointer') {
      return equalObjectsGeneric(object[key], constraints, function (obj, ptr) {
        return typeof obj !== 'undefined' && ptr.className === obj.className && ptr.objectId === obj.objectId;
      });
    }

    return equalObjectsGeneric(object[key], Parse._decode(key, constraints), equalObjects);
  } // More complex cases


  for (var condition in constraints) {
    compareTo = constraints[condition];

    if (compareTo.__type) {
      compareTo = Parse._decode(key, compareTo);
    }

    switch (condition) {
      case '$lt':
        if (object[key] >= compareTo) {
          return false;
        }

        break;

      case '$lte':
        if (object[key] > compareTo) {
          return false;
        }

        break;

      case '$gt':
        if (object[key] <= compareTo) {
          return false;
        }

        break;

      case '$gte':
        if (object[key] < compareTo) {
          return false;
        }

        break;

      case '$ne':
        if (equalObjects(object[key], compareTo)) {
          return false;
        }

        break;

      case '$in':
        if (!contains(compareTo, object[key])) {
          return false;
        }

        break;

      case '$nin':
        if (contains(compareTo, object[key])) {
          return false;
        }

        break;

      case '$all':
        for (i = 0; i < compareTo.length; i++) {
          if (object[key].indexOf(compareTo[i]) < 0) {
            return false;
          }
        }

        break;

      case '$exists':
        {
          const propertyExists = typeof object[key] !== 'undefined';
          const existenceIsRequired = constraints['$exists'];

          if (typeof constraints['$exists'] !== 'boolean') {
            // The SDK will never submit a non-boolean for $exists, but if someone
            // tries to submit a non-boolean for $exits outside the SDKs, just ignore it.
            break;
          }

          if (!propertyExists && existenceIsRequired || propertyExists && !existenceIsRequired) {
            return false;
          }

          break;
        }

      case '$regex':
        if (typeof compareTo === 'object') {
          return compareTo.test(object[key]);
        } // JS doesn't support perl-style escaping


        var expString = '';
        var escapeEnd = -2;
        var escapeStart = compareTo.indexOf('\\Q');

        while (escapeStart > -1) {
          // Add the unescaped portion
          expString += compareTo.substring(escapeEnd + 2, escapeStart);
          escapeEnd = compareTo.indexOf('\\E', escapeStart);

          if (escapeEnd > -1) {
            expString += compareTo.substring(escapeStart + 2, escapeEnd).replace(/\\\\\\\\E/g, '\\E').replace(/\W/g, '\\$&');
          }

          escapeStart = compareTo.indexOf('\\Q', escapeEnd);
        }

        expString += compareTo.substring(Math.max(escapeStart, escapeEnd + 2));
        var exp = new RegExp(expString, constraints.$options || '');

        if (!exp.test(object[key])) {
          return false;
        }

        break;

      case '$nearSphere':
        if (!compareTo || !object[key]) {
          return false;
        }

        var distance = compareTo.radiansTo(object[key]);
        var max = constraints.$maxDistance || Infinity;
        return distance <= max;

      case '$within':
        if (!compareTo || !object[key]) {
          return false;
        }

        var southWest = compareTo.$box[0];
        var northEast = compareTo.$box[1];

        if (southWest.latitude > northEast.latitude || southWest.longitude > northEast.longitude) {
          // Invalid box, crosses the date line
          return false;
        }

        return object[key].latitude > southWest.latitude && object[key].latitude < northEast.latitude && object[key].longitude > southWest.longitude && object[key].longitude < northEast.longitude;

      case '$options':
        // Not a query type, but a way to add options to $regex. Ignore and
        // avoid the default
        break;

      case '$maxDistance':
        // Not a query type, but a way to add a cap to $nearSphere. Ignore and
        // avoid the default
        break;

      case '$select':
        return false;

      case '$dontSelect':
        return false;

      default:
        return false;
    }
  }

  return true;
}

var QueryTools = {
  queryHash: queryHash,
  matchesQuery: matchesQuery
};
module.exports = QueryTools;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9MaXZlUXVlcnkvUXVlcnlUb29scy5qcyJdLCJuYW1lcyI6WyJlcXVhbE9iamVjdHMiLCJyZXF1aXJlIiwiSWQiLCJQYXJzZSIsImZsYXR0ZW5PclF1ZXJpZXMiLCJ3aGVyZSIsImhhc093blByb3BlcnR5IiwiYWNjdW0iLCJpIiwiJG9yIiwibGVuZ3RoIiwiY29uY2F0Iiwic3RyaW5naWZ5Iiwib2JqZWN0IiwicmVwbGFjZSIsIkFycmF5IiwiaXNBcnJheSIsImNvcHkiLCJtYXAiLCJzb3J0Iiwiam9pbiIsInNlY3Rpb25zIiwia2V5cyIsIk9iamVjdCIsImsiLCJwdXNoIiwicXVlcnlIYXNoIiwicXVlcnkiLCJRdWVyeSIsImNsYXNzTmFtZSIsIl93aGVyZSIsImNvbHVtbnMiLCJ2YWx1ZXMiLCJ1bmlxdWVDb2x1bW5zIiwic3ViVmFsdWVzIiwiaiIsImNvbnRhaW5zIiwiaGF5c3RhY2siLCJuZWVkbGUiLCJfX3R5cGUiLCJwdHIiLCJvYmplY3RJZCIsImluZGV4T2YiLCJtYXRjaGVzUXVlcnkiLCJpZCIsImZpZWxkIiwibWF0Y2hlc0tleUNvbnN0cmFpbnRzIiwiZXF1YWxPYmplY3RzR2VuZXJpYyIsIm9iaiIsImNvbXBhcmVUbyIsImVxbEZuIiwia2V5IiwiY29uc3RyYWludHMiLCJrZXlDb21wb25lbnRzIiwic3BsaXQiLCJzdWJPYmplY3RLZXkiLCJrZXlSZW1haW5kZXIiLCJzbGljZSIsIkRhdGUiLCJpc28iLCJfZGVjb2RlIiwiY29uZGl0aW9uIiwicHJvcGVydHlFeGlzdHMiLCJleGlzdGVuY2VJc1JlcXVpcmVkIiwidGVzdCIsImV4cFN0cmluZyIsImVzY2FwZUVuZCIsImVzY2FwZVN0YXJ0Iiwic3Vic3RyaW5nIiwiTWF0aCIsIm1heCIsImV4cCIsIlJlZ0V4cCIsIiRvcHRpb25zIiwiZGlzdGFuY2UiLCJyYWRpYW5zVG8iLCIkbWF4RGlzdGFuY2UiLCJJbmZpbml0eSIsInNvdXRoV2VzdCIsIiRib3giLCJub3J0aEVhc3Qi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QUFTLENBQUM4QixJQUFWLENBQWUsQ0FBZixDQUFoQjtBQUNBLFlBQUlDLFNBQVMsR0FBRy9CLFNBQVMsQ0FBQzhCLElBQVYsQ0FBZSxDQUFmLENBQWhCOztBQUNBLFlBQ0VELFNBQVMsQ0FBQ0csUUFBVixHQUFxQkQsU0FBUyxDQUFDQyxRQUEvQixJQUNBSCxTQUFTLENBQUNJLFNBQVYsR0FBc0JGLFNBQVMsQ0FBQ0UsU0FGbEMsRUFHRTtBQUNBO0FBQ0EsaUJBQU8sS0FBUDtBQUNEOztBQUNELGVBQ0VyRSxNQUFNLENBQUNzQyxHQUFELENBQU4sQ0FBWThCLFFBQVosR0FBdUJILFNBQVMsQ0FBQ0csUUFBakMsSUFDQXBFLE1BQU0sQ0FBQ3NDLEdBQUQsQ0FBTixDQUFZOEIsUUFBWixHQUF1QkQsU0FBUyxDQUFDQyxRQURqQyxJQUVBcEUsTUFBTSxDQUFDc0MsR0FBRCxDQUFOLENBQVkrQixTQUFaLEdBQXdCSixTQUFTLENBQUNJLFNBRmxDLElBR0FyRSxNQUFNLENBQUNzQyxHQUFELENBQU4sQ0FBWStCLFNBQVosR0FBd0JGLFNBQVMsQ0FBQ0UsU0FKcEM7O0FBTUYsV0FBSyxVQUFMO0FBQ0U7QUFDQTtBQUNBOztBQUNGLFdBQUssY0FBTDtBQUNFO0FBQ0E7QUFDQTs7QUFDRixXQUFLLFNBQUw7QUFDRSxlQUFPLEtBQVA7O0FBQ0YsV0FBSyxhQUFMO0FBQ0UsZUFBTyxLQUFQOztBQUNGO0FBQ0UsZUFBTyxLQUFQO0FBN0hKO0FBK0hEOztBQUNELFNBQU8sSUFBUDtBQUNEOztBQUVELElBQUlDLFVBQVUsR0FBRztBQUNmekQsRUFBQUEsU0FBUyxFQUFFQSxTQURJO0FBRWZpQixFQUFBQSxZQUFZLEVBQUVBO0FBRkMsQ0FBakI7QUFLQXlDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkYsVUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZXF1YWxPYmplY3RzID0gcmVxdWlyZSgnLi9lcXVhbE9iamVjdHMnKTtcbnZhciBJZCA9IHJlcXVpcmUoJy4vSWQnKTtcbnZhciBQYXJzZSA9IHJlcXVpcmUoJ3BhcnNlL25vZGUnKTtcblxuLyoqXG4gKiBRdWVyeSBIYXNoZXMgYXJlIGRldGVybWluaXN0aWMgaGFzaGVzIGZvciBQYXJzZSBRdWVyaWVzLlxuICogQW55IHR3byBxdWVyaWVzIHRoYXQgaGF2ZSB0aGUgc2FtZSBzZXQgb2YgY29uc3RyYWludHMgd2lsbCBwcm9kdWNlIHRoZSBzYW1lXG4gKiBoYXNoLiBUaGlzIGxldHMgdXMgcmVsaWFibHkgZ3JvdXAgY29tcG9uZW50cyBieSB0aGUgcXVlcmllcyB0aGV5IGRlcGVuZCB1cG9uLFxuICogYW5kIHF1aWNrbHkgZGV0ZXJtaW5lIGlmIGEgcXVlcnkgaGFzIGNoYW5nZWQuXG4gKi9cblxuLyoqXG4gKiBDb252ZXJ0ICRvciBxdWVyaWVzIGludG8gYW4gYXJyYXkgb2Ygd2hlcmUgY29uZGl0aW9uc1xuICovXG5mdW5jdGlvbiBmbGF0dGVuT3JRdWVyaWVzKHdoZXJlKSB7XG4gIGlmICghd2hlcmUuaGFzT3duUHJvcGVydHkoJyRvcicpKSB7XG4gICAgcmV0dXJuIHdoZXJlO1xuICB9XG4gIHZhciBhY2N1bSA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHdoZXJlLiRvci5sZW5ndGg7IGkrKykge1xuICAgIGFjY3VtID0gYWNjdW0uY29uY2F0KHdoZXJlLiRvcltpXSk7XG4gIH1cbiAgcmV0dXJuIGFjY3VtO1xufVxuXG4vKipcbiAqIERldGVybWluaXN0aWNhbGx5IHR1cm5zIGFuIG9iamVjdCBpbnRvIGEgc3RyaW5nLiBEaXNyZWdhcmRzIG9yZGVyaW5nXG4gKi9cbmZ1bmN0aW9uIHN0cmluZ2lmeShvYmplY3QpOiBzdHJpbmcge1xuICBpZiAodHlwZW9mIG9iamVjdCAhPT0gJ29iamVjdCcgfHwgb2JqZWN0ID09PSBudWxsKSB7XG4gICAgaWYgKHR5cGVvZiBvYmplY3QgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gJ1wiJyArIG9iamVjdC5yZXBsYWNlKC9cXHwvZywgJyV8JykgKyAnXCInO1xuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0ICsgJyc7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkob2JqZWN0KSkge1xuICAgIHZhciBjb3B5ID0gb2JqZWN0Lm1hcChzdHJpbmdpZnkpO1xuICAgIGNvcHkuc29ydCgpO1xuICAgIHJldHVybiAnWycgKyBjb3B5LmpvaW4oJywnKSArICddJztcbiAgfVxuICB2YXIgc2VjdGlvbnMgPSBbXTtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuICBrZXlzLnNvcnQoKTtcbiAgZm9yICh2YXIgayA9IDA7IGsgPCBrZXlzLmxlbmd0aDsgaysrKSB7XG4gICAgc2VjdGlvbnMucHVzaChzdHJpbmdpZnkoa2V5c1trXSkgKyAnOicgKyBzdHJpbmdpZnkob2JqZWN0W2tleXNba11dKSk7XG4gIH1cbiAgcmV0dXJuICd7JyArIHNlY3Rpb25zLmpvaW4oJywnKSArICd9Jztcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBhIGhhc2ggZnJvbSBhIHF1ZXJ5LCB3aXRoIHVuaXF1ZSBmaWVsZHMgZm9yIGNvbHVtbnMsIHZhbHVlcywgb3JkZXIsXG4gKiBza2lwLCBhbmQgbGltaXQuXG4gKi9cbmZ1bmN0aW9uIHF1ZXJ5SGFzaChxdWVyeSkge1xuICBpZiAocXVlcnkgaW5zdGFuY2VvZiBQYXJzZS5RdWVyeSkge1xuICAgIHF1ZXJ5ID0ge1xuICAgICAgY2xhc3NOYW1lOiBxdWVyeS5jbGFzc05hbWUsXG4gICAgICB3aGVyZTogcXVlcnkuX3doZXJlLFxuICAgIH07XG4gIH1cbiAgdmFyIHdoZXJlID0gZmxhdHRlbk9yUXVlcmllcyhxdWVyeS53aGVyZSB8fCB7fSk7XG4gIHZhciBjb2x1bW5zID0gW107XG4gIHZhciB2YWx1ZXMgPSBbXTtcbiAgdmFyIGk7XG4gIGlmIChBcnJheS5pc0FycmF5KHdoZXJlKSkge1xuICAgIHZhciB1bmlxdWVDb2x1bW5zID0ge307XG4gICAgZm9yIChpID0gMDsgaSA8IHdoZXJlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc3ViVmFsdWVzID0ge307XG4gICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHdoZXJlW2ldKTtcbiAgICAgIGtleXMuc29ydCgpO1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBrZXlzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHN1YlZhbHVlc1trZXlzW2pdXSA9IHdoZXJlW2ldW2tleXNbal1dO1xuICAgICAgICB1bmlxdWVDb2x1bW5zW2tleXNbal1dID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhbHVlcy5wdXNoKHN1YlZhbHVlcyk7XG4gICAgfVxuICAgIGNvbHVtbnMgPSBPYmplY3Qua2V5cyh1bmlxdWVDb2x1bW5zKTtcbiAgICBjb2x1bW5zLnNvcnQoKTtcbiAgfSBlbHNlIHtcbiAgICBjb2x1bW5zID0gT2JqZWN0LmtleXMod2hlcmUpO1xuICAgIGNvbHVtbnMuc29ydCgpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBjb2x1bW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YWx1ZXMucHVzaCh3aGVyZVtjb2x1bW5zW2ldXSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHNlY3Rpb25zID0gW2NvbHVtbnMuam9pbignLCcpLCBzdHJpbmdpZnkodmFsdWVzKV07XG5cbiAgcmV0dXJuIHF1ZXJ5LmNsYXNzTmFtZSArICc6JyArIHNlY3Rpb25zLmpvaW4oJ3wnKTtcbn1cblxuLyoqXG4gKiBjb250YWlucyAtLSBEZXRlcm1pbmVzIGlmIGFuIG9iamVjdCBpcyBjb250YWluZWQgaW4gYSBsaXN0IHdpdGggc3BlY2lhbCBoYW5kbGluZyBmb3IgUGFyc2UgcG9pbnRlcnMuXG4gKi9cbmZ1bmN0aW9uIGNvbnRhaW5zKGhheXN0YWNrOiBBcnJheSwgbmVlZGxlOiBhbnkpOiBib29sZWFuIHtcbiAgaWYgKG5lZWRsZSAmJiBuZWVkbGUuX190eXBlICYmIG5lZWRsZS5fX3R5cGUgPT09ICdQb2ludGVyJykge1xuICAgIGZvciAoY29uc3QgaSBpbiBoYXlzdGFjaykge1xuICAgICAgY29uc3QgcHRyID0gaGF5c3RhY2tbaV07XG4gICAgICBpZiAodHlwZW9mIHB0ciA9PT0gJ3N0cmluZycgJiYgcHRyID09PSBuZWVkbGUub2JqZWN0SWQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIHB0ci5jbGFzc05hbWUgPT09IG5lZWRsZS5jbGFzc05hbWUgJiZcbiAgICAgICAgcHRyLm9iamVjdElkID09PSBuZWVkbGUub2JqZWN0SWRcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBoYXlzdGFjay5pbmRleE9mKG5lZWRsZSkgPiAtMTtcbn1cbi8qKlxuICogbWF0Y2hlc1F1ZXJ5IC0tIERldGVybWluZXMgaWYgYW4gb2JqZWN0IHdvdWxkIGJlIHJldHVybmVkIGJ5IGEgUGFyc2UgUXVlcnlcbiAqIEl0J3MgYSBsaWdodHdlaWdodCwgd2hlcmUtY2xhdXNlIG9ubHkgaW1wbGVtZW50YXRpb24gb2YgYSBmdWxsIHF1ZXJ5IGVuZ2luZS5cbiAqIFNpbmNlIHdlIGZpbmQgcXVlcmllcyB0aGF0IG1hdGNoIG9iamVjdHMsIHJhdGhlciB0aGFuIG9iamVjdHMgdGhhdCBtYXRjaFxuICogcXVlcmllcywgd2UgY2FuIGF2b2lkIGJ1aWxkaW5nIGEgZnVsbC1ibG93biBxdWVyeSB0b29sLlxuICovXG5mdW5jdGlvbiBtYXRjaGVzUXVlcnkob2JqZWN0OiBhbnksIHF1ZXJ5OiBhbnkpOiBib29sZWFuIHtcbiAgaWYgKHF1ZXJ5IGluc3RhbmNlb2YgUGFyc2UuUXVlcnkpIHtcbiAgICB2YXIgY2xhc3NOYW1lID1cbiAgICAgIG9iamVjdC5pZCBpbnN0YW5jZW9mIElkID8gb2JqZWN0LmlkLmNsYXNzTmFtZSA6IG9iamVjdC5jbGFzc05hbWU7XG4gICAgaWYgKGNsYXNzTmFtZSAhPT0gcXVlcnkuY2xhc3NOYW1lKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBtYXRjaGVzUXVlcnkob2JqZWN0LCBxdWVyeS5fd2hlcmUpO1xuICB9XG4gIGZvciAodmFyIGZpZWxkIGluIHF1ZXJ5KSB7XG4gICAgaWYgKCFtYXRjaGVzS2V5Q29uc3RyYWludHMob2JqZWN0LCBmaWVsZCwgcXVlcnlbZmllbGRdKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gZXF1YWxPYmplY3RzR2VuZXJpYyhvYmosIGNvbXBhcmVUbywgZXFsRm4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoZXFsRm4ob2JqW2ldLCBjb21wYXJlVG8pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gZXFsRm4ob2JqLCBjb21wYXJlVG8pO1xufVxuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciBhbiBvYmplY3QgbWF0Y2hlcyBhIHNpbmdsZSBrZXkncyBjb25zdHJhaW50c1xuICovXG5mdW5jdGlvbiBtYXRjaGVzS2V5Q29uc3RyYWludHMob2JqZWN0LCBrZXksIGNvbnN0cmFpbnRzKSB7XG4gIGlmIChjb25zdHJhaW50cyA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoa2V5LmluZGV4T2YoJy4nKSA+PSAwKSB7XG4gICAgLy8gS2V5IHJlZmVyZW5jZXMgYSBzdWJvYmplY3RcbiAgICB2YXIga2V5Q29tcG9uZW50cyA9IGtleS5zcGxpdCgnLicpO1xuICAgIHZhciBzdWJPYmplY3RLZXkgPSBrZXlDb21wb25lbnRzWzBdO1xuICAgIHZhciBrZXlSZW1haW5kZXIgPSBrZXlDb21wb25lbnRzLnNsaWNlKDEpLmpvaW4oJy4nKTtcbiAgICByZXR1cm4gbWF0Y2hlc0tleUNvbnN0cmFpbnRzKFxuICAgICAgb2JqZWN0W3N1Yk9iamVjdEtleV0gfHwge30sXG4gICAgICBrZXlSZW1haW5kZXIsXG4gICAgICBjb25zdHJhaW50c1xuICAgICk7XG4gIH1cbiAgdmFyIGk7XG4gIGlmIChrZXkgPT09ICckb3InKSB7XG4gICAgZm9yIChpID0gMDsgaSA8IGNvbnN0cmFpbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAobWF0Y2hlc1F1ZXJ5KG9iamVjdCwgY29uc3RyYWludHNbaV0pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGtleSA9PT0gJyRyZWxhdGVkVG8nKSB7XG4gICAgLy8gQmFpbCEgV2UgY2FuJ3QgaGFuZGxlIHJlbGF0aW9uYWwgcXVlcmllcyBsb2NhbGx5XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIERlY29kZSBEYXRlIEpTT04gdmFsdWVcbiAgaWYgKG9iamVjdFtrZXldICYmIG9iamVjdFtrZXldLl9fdHlwZSA9PSAnRGF0ZScpIHtcbiAgICBvYmplY3Rba2V5XSA9IG5ldyBEYXRlKG9iamVjdFtrZXldLmlzbyk7XG4gIH1cbiAgLy8gRXF1YWxpdHkgKG9yIEFycmF5IGNvbnRhaW5zKSBjYXNlc1xuICBpZiAodHlwZW9mIGNvbnN0cmFpbnRzICE9PSAnb2JqZWN0Jykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG9iamVjdFtrZXldKSkge1xuICAgICAgcmV0dXJuIG9iamVjdFtrZXldLmluZGV4T2YoY29uc3RyYWludHMpID4gLTE7XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Rba2V5XSA9PT0gY29uc3RyYWludHM7XG4gIH1cbiAgdmFyIGNvbXBhcmVUbztcbiAgaWYgKGNvbnN0cmFpbnRzLl9fdHlwZSkge1xuICAgIGlmIChjb25zdHJhaW50cy5fX3R5cGUgPT09ICdQb2ludGVyJykge1xuICAgICAgcmV0dXJuIGVxdWFsT2JqZWN0c0dlbmVyaWMob2JqZWN0W2tleV0sIGNvbnN0cmFpbnRzLCBmdW5jdGlvbihvYmosIHB0cikge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIHR5cGVvZiBvYmogIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgcHRyLmNsYXNzTmFtZSA9PT0gb2JqLmNsYXNzTmFtZSAmJlxuICAgICAgICAgIHB0ci5vYmplY3RJZCA9PT0gb2JqLm9iamVjdElkXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZXF1YWxPYmplY3RzR2VuZXJpYyhcbiAgICAgIG9iamVjdFtrZXldLFxuICAgICAgUGFyc2UuX2RlY29kZShrZXksIGNvbnN0cmFpbnRzKSxcbiAgICAgIGVxdWFsT2JqZWN0c1xuICAgICk7XG4gIH1cbiAgLy8gTW9yZSBjb21wbGV4IGNhc2VzXG4gIGZvciAodmFyIGNvbmRpdGlvbiBpbiBjb25zdHJhaW50cykge1xuICAgIGNvbXBhcmVUbyA9IGNvbnN0cmFpbnRzW2NvbmRpdGlvbl07XG4gICAgaWYgKGNvbXBhcmVUby5fX3R5cGUpIHtcbiAgICAgIGNvbXBhcmVUbyA9IFBhcnNlLl9kZWNvZGUoa2V5LCBjb21wYXJlVG8pO1xuICAgIH1cbiAgICBzd2l0Y2ggKGNvbmRpdGlvbikge1xuICAgICAgY2FzZSAnJGx0JzpcbiAgICAgICAgaWYgKG9iamVjdFtrZXldID49IGNvbXBhcmVUbykge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJyRsdGUnOlxuICAgICAgICBpZiAob2JqZWN0W2tleV0gPiBjb21wYXJlVG8pIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICckZ3QnOlxuICAgICAgICBpZiAob2JqZWN0W2tleV0gPD0gY29tcGFyZVRvKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnJGd0ZSc6XG4gICAgICAgIGlmIChvYmplY3Rba2V5XSA8IGNvbXBhcmVUbykge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJyRuZSc6XG4gICAgICAgIGlmIChlcXVhbE9iamVjdHMob2JqZWN0W2tleV0sIGNvbXBhcmVUbykpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICckaW4nOlxuICAgICAgICBpZiAoIWNvbnRhaW5zKGNvbXBhcmVUbywgb2JqZWN0W2tleV0pKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnJG5pbic6XG4gICAgICAgIGlmIChjb250YWlucyhjb21wYXJlVG8sIG9iamVjdFtrZXldKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJyRhbGwnOlxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29tcGFyZVRvLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKG9iamVjdFtrZXldLmluZGV4T2YoY29tcGFyZVRvW2ldKSA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICckZXhpc3RzJzoge1xuICAgICAgICBjb25zdCBwcm9wZXJ0eUV4aXN0cyA9IHR5cGVvZiBvYmplY3Rba2V5XSAhPT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgIGNvbnN0IGV4aXN0ZW5jZUlzUmVxdWlyZWQgPSBjb25zdHJhaW50c1snJGV4aXN0cyddO1xuICAgICAgICBpZiAodHlwZW9mIGNvbnN0cmFpbnRzWyckZXhpc3RzJ10gIT09ICdib29sZWFuJykge1xuICAgICAgICAgIC8vIFRoZSBTREsgd2lsbCBuZXZlciBzdWJtaXQgYSBub24tYm9vbGVhbiBmb3IgJGV4aXN0cywgYnV0IGlmIHNvbWVvbmVcbiAgICAgICAgICAvLyB0cmllcyB0byBzdWJtaXQgYSBub24tYm9vbGVhbiBmb3IgJGV4aXRzIG91dHNpZGUgdGhlIFNES3MsIGp1c3QgaWdub3JlIGl0LlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICAoIXByb3BlcnR5RXhpc3RzICYmIGV4aXN0ZW5jZUlzUmVxdWlyZWQpIHx8XG4gICAgICAgICAgKHByb3BlcnR5RXhpc3RzICYmICFleGlzdGVuY2VJc1JlcXVpcmVkKVxuICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlICckcmVnZXgnOlxuICAgICAgICBpZiAodHlwZW9mIGNvbXBhcmVUbyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICByZXR1cm4gY29tcGFyZVRvLnRlc3Qob2JqZWN0W2tleV0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIEpTIGRvZXNuJ3Qgc3VwcG9ydCBwZXJsLXN0eWxlIGVzY2FwaW5nXG4gICAgICAgIHZhciBleHBTdHJpbmcgPSAnJztcbiAgICAgICAgdmFyIGVzY2FwZUVuZCA9IC0yO1xuICAgICAgICB2YXIgZXNjYXBlU3RhcnQgPSBjb21wYXJlVG8uaW5kZXhPZignXFxcXFEnKTtcbiAgICAgICAgd2hpbGUgKGVzY2FwZVN0YXJ0ID4gLTEpIHtcbiAgICAgICAgICAvLyBBZGQgdGhlIHVuZXNjYXBlZCBwb3J0aW9uXG4gICAgICAgICAgZXhwU3RyaW5nICs9IGNvbXBhcmVUby5zdWJzdHJpbmcoZXNjYXBlRW5kICsgMiwgZXNjYXBlU3RhcnQpO1xuICAgICAgICAgIGVzY2FwZUVuZCA9IGNvbXBhcmVUby5pbmRleE9mKCdcXFxcRScsIGVzY2FwZVN0YXJ0KTtcbiAgICAgICAgICBpZiAoZXNjYXBlRW5kID4gLTEpIHtcbiAgICAgICAgICAgIGV4cFN0cmluZyArPSBjb21wYXJlVG9cbiAgICAgICAgICAgICAgLnN1YnN0cmluZyhlc2NhcGVTdGFydCArIDIsIGVzY2FwZUVuZClcbiAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFxcXFxcXFxcXFxcXFxFL2csICdcXFxcRScpXG4gICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFcvZywgJ1xcXFwkJicpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGVzY2FwZVN0YXJ0ID0gY29tcGFyZVRvLmluZGV4T2YoJ1xcXFxRJywgZXNjYXBlRW5kKTtcbiAgICAgICAgfVxuICAgICAgICBleHBTdHJpbmcgKz0gY29tcGFyZVRvLnN1YnN0cmluZyhNYXRoLm1heChlc2NhcGVTdGFydCwgZXNjYXBlRW5kICsgMikpO1xuICAgICAgICB2YXIgZXhwID0gbmV3IFJlZ0V4cChleHBTdHJpbmcsIGNvbnN0cmFpbnRzLiRvcHRpb25zIHx8ICcnKTtcbiAgICAgICAgaWYgKCFleHAudGVzdChvYmplY3Rba2V5XSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICckbmVhclNwaGVyZSc6XG4gICAgICAgIGlmICghY29tcGFyZVRvIHx8ICFvYmplY3Rba2V5XSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGlzdGFuY2UgPSBjb21wYXJlVG8ucmFkaWFuc1RvKG9iamVjdFtrZXldKTtcbiAgICAgICAgdmFyIG1heCA9IGNvbnN0cmFpbnRzLiRtYXhEaXN0YW5jZSB8fCBJbmZpbml0eTtcbiAgICAgICAgcmV0dXJuIGRpc3RhbmNlIDw9IG1heDtcbiAgICAgIGNhc2UgJyR3aXRoaW4nOlxuICAgICAgICBpZiAoIWNvbXBhcmVUbyB8fCAhb2JqZWN0W2tleV0pIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNvdXRoV2VzdCA9IGNvbXBhcmVUby4kYm94WzBdO1xuICAgICAgICB2YXIgbm9ydGhFYXN0ID0gY29tcGFyZVRvLiRib3hbMV07XG4gICAgICAgIGlmIChcbiAgICAgICAgICBzb3V0aFdlc3QubGF0aXR1ZGUgPiBub3J0aEVhc3QubGF0aXR1ZGUgfHxcbiAgICAgICAgICBzb3V0aFdlc3QubG9uZ2l0dWRlID4gbm9ydGhFYXN0LmxvbmdpdHVkZVxuICAgICAgICApIHtcbiAgICAgICAgICAvLyBJbnZhbGlkIGJveCwgY3Jvc3NlcyB0aGUgZGF0ZSBsaW5lXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgb2JqZWN0W2tleV0ubGF0aXR1ZGUgPiBzb3V0aFdlc3QubGF0aXR1ZGUgJiZcbiAgICAgICAgICBvYmplY3Rba2V5XS5sYXRpdHVkZSA8IG5vcnRoRWFzdC5sYXRpdHVkZSAmJlxuICAgICAgICAgIG9iamVjdFtrZXldLmxvbmdpdHVkZSA+IHNvdXRoV2VzdC5sb25naXR1ZGUgJiZcbiAgICAgICAgICBvYmplY3Rba2V5XS5sb25naXR1ZGUgPCBub3J0aEVhc3QubG9uZ2l0dWRlXG4gICAgICAgICk7XG4gICAgICBjYXNlICckb3B0aW9ucyc6XG4gICAgICAgIC8vIE5vdCBhIHF1ZXJ5IHR5cGUsIGJ1dCBhIHdheSB0byBhZGQgb3B0aW9ucyB0byAkcmVnZXguIElnbm9yZSBhbmRcbiAgICAgICAgLy8gYXZvaWQgdGhlIGRlZmF1bHRcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICckbWF4RGlzdGFuY2UnOlxuICAgICAgICAvLyBOb3QgYSBxdWVyeSB0eXBlLCBidXQgYSB3YXkgdG8gYWRkIGEgY2FwIHRvICRuZWFyU3BoZXJlLiBJZ25vcmUgYW5kXG4gICAgICAgIC8vIGF2b2lkIHRoZSBkZWZhdWx0XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnJHNlbGVjdCc6XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIGNhc2UgJyRkb250U2VsZWN0JzpcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxudmFyIFF1ZXJ5VG9vbHMgPSB7XG4gIHF1ZXJ5SGFzaDogcXVlcnlIYXNoLFxuICBtYXRjaGVzUXVlcnk6IG1hdGNoZXNRdWVyeSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUXVlcnlUb29scztcbiJdfQ==