"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.load = void 0;

var _graphql = require("graphql");

var _graphqlListFields = _interopRequireDefault(require("graphql-list-fields"));

var _node = _interopRequireDefault(require("parse/node"));

var _rest = _interopRequireDefault(require("../../rest"));

var _Auth = _interopRequireDefault(require("../../Auth"));

var _parseClassTypes = require("./parseClassTypes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const load = parseGraphQLSchema => {
  if (parseGraphQLSchema.isUsersClassDisabled) {
    return;
  }

  const fields = {};
  fields.me = {
    description: 'The Me query can be used to return the current user data.',
    type: new _graphql.GraphQLNonNull(parseGraphQLSchema.meType),

    async resolve(_source, _args, context, queryInfo) {
      try {
        const {
          config,
          info
        } = context;

        if (!info || !info.sessionToken) {
          throw new _node.default.Error(_node.default.Error.INVALID_SESSION_TOKEN, 'Invalid session token');
        }

        const sessionToken = info.sessionToken;
        const selectedFields = (0, _graphqlListFields.default)(queryInfo);
        const {
          include
        } = (0, _parseClassTypes.extractKeysAndInclude)(selectedFields);
        const response = await _rest.default.find(config, _Auth.default.master(config), '_Session', {
          sessionToken
        }, {
          include: include.split(',').map(included => `user.${included}`).join(',')
        }, info.clientVersion);

        if (!response.results || response.results.length == 0 || !response.results[0].user) {
          throw new _node.default.Error(_node.default.Error.INVALID_SESSION_TOKEN, 'Invalid session token');
        } else {
          const user = response.results[0].user;
          user.sessionToken = sessionToken;
          return user;
        }
      } catch (e) {
        parseGraphQLSchema.handleError(e);
      }
    }

  };
  const usersQuery = new _graphql.GraphQLObjectType({
    name: 'UsersQuery',
    description: 'UsersQuery is the top level type for users queries.',
    fields
  });
  parseGraphQLSchema.graphQLTypes.push(usersQuery);
  parseGraphQLSchema.graphQLQueries.users = {
    description: 'This is the top level for users queries.',
    type: usersQuery,
    resolve: () => new Object()
  };
};

exports.load = load;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9HcmFwaFFML2xvYWRlcnMvdXNlcnNRdWVyaWVzLmpzIl0sIm5hbWVzIjpbImxvYWQiLCJwYXJzZUdyYXBoUUxTY2hlbWEiLCJpc1VzZXJzQ2xhc3NEaXNhYmxlZCIsImZpZWxkcyIsIm1lIiwiZGVzY3JpcHRpb24iLCJ0eXBlIiwiR3JhcGhRTE5vbk51bGwiLCJtZVR5cGUiLCJyZXNvbHZlIiwiX3NvdXJjZSIsIl9hcmdzIiwiY29udGV4dCIsInF1ZXJ5SW5mbyIsImNvbmZpZyIsImluZm8iLCJzZXNzaW9uVG9rZW4iLCJQYXJzZSIsIkVycm9yIiwiSU5WQUxJRF9TRVNTSU9OX1RPS0VOIiwic2VsZWN0ZWRGaWVsZHMiLCJpbmNsdWRlIiwicmVzcG9uc2UiLCJyZXN0IiwiZmluZCIsIkF1dGgiLCJtYXN0ZXIiLCJzcGxpdCIsIm1hcCIsImluY2x1ZGVkIiwiam9pbiIsImNsaWVudFZlcnNpb24iLCJyZXN1bHRzIiwibGVuZ3RoIiwidXNlciIsImUiLCJoYW5kbGVFcnJvciIsInVzZXJzUXVlcnkiLCJHcmFwaFFMT2JqZWN0VHlwZSIsIm5hbWUiLCJncmFwaFFMVHlwZXMiLCJwdXNoIiwiZ3JhcGhRTFF1ZXJpZXMiLCJ1c2VycyIsIk9iamVjdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUEsTUFBTUEsSUFBSSxHQUFHQyxrQkFBa0IsSUFBSTtBQUNqQyxNQUFJQSxrQkFBa0IsQ0FBQ0Msb0JBQXZCLEVBQTZDO0FBQzNDO0FBQ0Q7O0FBQ0QsUUFBTUMsTUFBTSxHQUFHLEVBQWY7QUFFQUEsRUFBQUEsTUFBTSxDQUFDQyxFQUFQLEdBQVk7QUFDVkMsSUFBQUEsV0FBVyxFQUFFLDJEQURIO0FBRVZDLElBQUFBLElBQUksRUFBRSxJQUFJQyx1QkFBSixDQUFtQk4sa0JBQWtCLENBQUNPLE1BQXRDLENBRkk7O0FBR1YsVUFBTUMsT0FBTixDQUFjQyxPQUFkLEVBQXVCQyxLQUF2QixFQUE4QkMsT0FBOUIsRUFBdUNDLFNBQXZDLEVBQWtEO0FBQ2hELFVBQUk7QUFDRixjQUFNO0FBQUVDLFVBQUFBLE1BQUY7QUFBVUMsVUFBQUE7QUFBVixZQUFtQkgsT0FBekI7O0FBRUEsWUFBSSxDQUFDRyxJQUFELElBQVMsQ0FBQ0EsSUFBSSxDQUFDQyxZQUFuQixFQUFpQztBQUMvQixnQkFBTSxJQUFJQyxjQUFNQyxLQUFWLENBQ0pELGNBQU1DLEtBQU4sQ0FBWUMscUJBRFIsRUFFSix1QkFGSSxDQUFOO0FBSUQ7O0FBQ0QsY0FBTUgsWUFBWSxHQUFHRCxJQUFJLENBQUNDLFlBQTFCO0FBQ0EsY0FBTUksY0FBYyxHQUFHLGdDQUFjUCxTQUFkLENBQXZCO0FBRUEsY0FBTTtBQUFFUSxVQUFBQTtBQUFGLFlBQWMsNENBQXNCRCxjQUF0QixDQUFwQjtBQUNBLGNBQU1FLFFBQVEsR0FBRyxNQUFNQyxjQUFLQyxJQUFMLENBQ3JCVixNQURxQixFQUVyQlcsY0FBS0MsTUFBTCxDQUFZWixNQUFaLENBRnFCLEVBR3JCLFVBSHFCLEVBSXJCO0FBQUVFLFVBQUFBO0FBQUYsU0FKcUIsRUFLckI7QUFDRUssVUFBQUEsT0FBTyxFQUFFQSxPQUFPLENBQ2JNLEtBRE0sQ0FDQSxHQURBLEVBRU5DLEdBRk0sQ0FFRkMsUUFBUSxJQUFLLFFBQU9BLFFBQVMsRUFGM0IsRUFHTkMsSUFITSxDQUdELEdBSEM7QUFEWCxTQUxxQixFQVdyQmYsSUFBSSxDQUFDZ0IsYUFYZ0IsQ0FBdkI7O0FBYUEsWUFDRSxDQUFDVCxRQUFRLENBQUNVLE9BQVYsSUFDQVYsUUFBUSxDQUFDVSxPQUFULENBQWlCQyxNQUFqQixJQUEyQixDQUQzQixJQUVBLENBQUNYLFFBQVEsQ0FBQ1UsT0FBVCxDQUFpQixDQUFqQixFQUFvQkUsSUFIdkIsRUFJRTtBQUNBLGdCQUFNLElBQUlqQixjQUFNQyxLQUFWLENBQ0pELGNBQU1DLEtBQU4sQ0FBWUMscUJBRFIsRUFFSix1QkFGSSxDQUFOO0FBSUQsU0FURCxNQVNPO0FBQ0wsZ0JBQU1lLElBQUksR0FBR1osUUFBUSxDQUFDVSxPQUFULENBQWlCLENBQWpCLEVBQW9CRSxJQUFqQztBQUNBQSxVQUFBQSxJQUFJLENBQUNsQixZQUFMLEdBQW9CQSxZQUFwQjtBQUNBLGlCQUFPa0IsSUFBUDtBQUNEO0FBQ0YsT0F4Q0QsQ0F3Q0UsT0FBT0MsQ0FBUCxFQUFVO0FBQ1ZsQyxRQUFBQSxrQkFBa0IsQ0FBQ21DLFdBQW5CLENBQStCRCxDQUEvQjtBQUNEO0FBQ0Y7O0FBL0NTLEdBQVo7QUFrREEsUUFBTUUsVUFBVSxHQUFHLElBQUlDLDBCQUFKLENBQXNCO0FBQ3ZDQyxJQUFBQSxJQUFJLEVBQUUsWUFEaUM7QUFFdkNsQyxJQUFBQSxXQUFXLEVBQUUscURBRjBCO0FBR3ZDRixJQUFBQTtBQUh1QyxHQUF0QixDQUFuQjtBQUtBRixFQUFBQSxrQkFBa0IsQ0FBQ3VDLFlBQW5CLENBQWdDQyxJQUFoQyxDQUFxQ0osVUFBckM7QUFFQXBDLEVBQUFBLGtCQUFrQixDQUFDeUMsY0FBbkIsQ0FBa0NDLEtBQWxDLEdBQTBDO0FBQ3hDdEMsSUFBQUEsV0FBVyxFQUFFLDBDQUQyQjtBQUV4Q0MsSUFBQUEsSUFBSSxFQUFFK0IsVUFGa0M7QUFHeEM1QixJQUFBQSxPQUFPLEVBQUUsTUFBTSxJQUFJbUMsTUFBSjtBQUh5QixHQUExQztBQUtELENBcEVEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR3JhcGhRTE5vbk51bGwsIEdyYXBoUUxPYmplY3RUeXBlIH0gZnJvbSAnZ3JhcGhxbCc7XG5pbXBvcnQgZ2V0RmllbGROYW1lcyBmcm9tICdncmFwaHFsLWxpc3QtZmllbGRzJztcbmltcG9ydCBQYXJzZSBmcm9tICdwYXJzZS9ub2RlJztcbmltcG9ydCByZXN0IGZyb20gJy4uLy4uL3Jlc3QnO1xuaW1wb3J0IEF1dGggZnJvbSAnLi4vLi4vQXV0aCc7XG5pbXBvcnQgeyBleHRyYWN0S2V5c0FuZEluY2x1ZGUgfSBmcm9tICcuL3BhcnNlQ2xhc3NUeXBlcyc7XG5cbmNvbnN0IGxvYWQgPSBwYXJzZUdyYXBoUUxTY2hlbWEgPT4ge1xuICBpZiAocGFyc2VHcmFwaFFMU2NoZW1hLmlzVXNlcnNDbGFzc0Rpc2FibGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGZpZWxkcyA9IHt9O1xuXG4gIGZpZWxkcy5tZSA9IHtcbiAgICBkZXNjcmlwdGlvbjogJ1RoZSBNZSBxdWVyeSBjYW4gYmUgdXNlZCB0byByZXR1cm4gdGhlIGN1cnJlbnQgdXNlciBkYXRhLicsXG4gICAgdHlwZTogbmV3IEdyYXBoUUxOb25OdWxsKHBhcnNlR3JhcGhRTFNjaGVtYS5tZVR5cGUpLFxuICAgIGFzeW5jIHJlc29sdmUoX3NvdXJjZSwgX2FyZ3MsIGNvbnRleHQsIHF1ZXJ5SW5mbykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgeyBjb25maWcsIGluZm8gfSA9IGNvbnRleHQ7XG5cbiAgICAgICAgaWYgKCFpbmZvIHx8ICFpbmZvLnNlc3Npb25Ub2tlbikge1xuICAgICAgICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihcbiAgICAgICAgICAgIFBhcnNlLkVycm9yLklOVkFMSURfU0VTU0lPTl9UT0tFTixcbiAgICAgICAgICAgICdJbnZhbGlkIHNlc3Npb24gdG9rZW4nXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzZXNzaW9uVG9rZW4gPSBpbmZvLnNlc3Npb25Ub2tlbjtcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRGaWVsZHMgPSBnZXRGaWVsZE5hbWVzKHF1ZXJ5SW5mbyk7XG5cbiAgICAgICAgY29uc3QgeyBpbmNsdWRlIH0gPSBleHRyYWN0S2V5c0FuZEluY2x1ZGUoc2VsZWN0ZWRGaWVsZHMpO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlc3QuZmluZChcbiAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgQXV0aC5tYXN0ZXIoY29uZmlnKSxcbiAgICAgICAgICAnX1Nlc3Npb24nLFxuICAgICAgICAgIHsgc2Vzc2lvblRva2VuIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW5jbHVkZTogaW5jbHVkZVxuICAgICAgICAgICAgICAuc3BsaXQoJywnKVxuICAgICAgICAgICAgICAubWFwKGluY2x1ZGVkID0+IGB1c2VyLiR7aW5jbHVkZWR9YClcbiAgICAgICAgICAgICAgLmpvaW4oJywnKSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGluZm8uY2xpZW50VmVyc2lvblxuICAgICAgICApO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgIXJlc3BvbnNlLnJlc3VsdHMgfHxcbiAgICAgICAgICByZXNwb25zZS5yZXN1bHRzLmxlbmd0aCA9PSAwIHx8XG4gICAgICAgICAgIXJlc3BvbnNlLnJlc3VsdHNbMF0udXNlclxuICAgICAgICApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoXG4gICAgICAgICAgICBQYXJzZS5FcnJvci5JTlZBTElEX1NFU1NJT05fVE9LRU4sXG4gICAgICAgICAgICAnSW52YWxpZCBzZXNzaW9uIHRva2VuJ1xuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgdXNlciA9IHJlc3BvbnNlLnJlc3VsdHNbMF0udXNlcjtcbiAgICAgICAgICB1c2VyLnNlc3Npb25Ub2tlbiA9IHNlc3Npb25Ub2tlbjtcbiAgICAgICAgICByZXR1cm4gdXNlcjtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBwYXJzZUdyYXBoUUxTY2hlbWEuaGFuZGxlRXJyb3IoZSk7XG4gICAgICB9XG4gICAgfSxcbiAgfTtcblxuICBjb25zdCB1c2Vyc1F1ZXJ5ID0gbmV3IEdyYXBoUUxPYmplY3RUeXBlKHtcbiAgICBuYW1lOiAnVXNlcnNRdWVyeScsXG4gICAgZGVzY3JpcHRpb246ICdVc2Vyc1F1ZXJ5IGlzIHRoZSB0b3AgbGV2ZWwgdHlwZSBmb3IgdXNlcnMgcXVlcmllcy4nLFxuICAgIGZpZWxkcyxcbiAgfSk7XG4gIHBhcnNlR3JhcGhRTFNjaGVtYS5ncmFwaFFMVHlwZXMucHVzaCh1c2Vyc1F1ZXJ5KTtcblxuICBwYXJzZUdyYXBoUUxTY2hlbWEuZ3JhcGhRTFF1ZXJpZXMudXNlcnMgPSB7XG4gICAgZGVzY3JpcHRpb246ICdUaGlzIGlzIHRoZSB0b3AgbGV2ZWwgZm9yIHVzZXJzIHF1ZXJpZXMuJyxcbiAgICB0eXBlOiB1c2Vyc1F1ZXJ5LFxuICAgIHJlc29sdmU6ICgpID0+IG5ldyBPYmplY3QoKSxcbiAgfTtcbn07XG5cbmV4cG9ydCB7IGxvYWQgfTtcbiJdfQ==