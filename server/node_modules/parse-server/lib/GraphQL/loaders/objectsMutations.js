"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.load = exports.deleteObject = exports.updateObject = exports.createObject = void 0;

var _graphql = require("graphql");

var defaultGraphQLTypes = _interopRequireWildcard(require("./defaultGraphQLTypes"));

var _rest = _interopRequireDefault(require("../../rest"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

const parseMap = {
  _op: '__op'
};

const transformToParse = fields => {
  if (!fields || typeof fields !== 'object') {
    return;
  }

  Object.keys(fields).forEach(fieldName => {
    const fieldValue = fields[fieldName];

    if (parseMap[fieldName]) {
      delete fields[fieldName];
      fields[parseMap[fieldName]] = fieldValue;
    }

    if (typeof fieldValue === 'object') {
      transformToParse(fieldValue);
    }
  });
};

const createObject = async (className, fields, config, auth, info) => {
  if (!fields) {
    fields = {};
  }

  transformToParse(fields);
  return (await _rest.default.create(config, auth, className, fields, info.clientSDK)).response;
};

exports.createObject = createObject;

const updateObject = async (className, objectId, fields, config, auth, info) => {
  if (!fields) {
    fields = {};
  }

  transformToParse(fields);
  return (await _rest.default.update(config, auth, className, {
    objectId
  }, fields, info.clientSDK)).response;
};

exports.updateObject = updateObject;

const deleteObject = async (className, objectId, config, auth, info) => {
  await _rest.default.del(config, auth, className, objectId, info.clientSDK);
  return true;
};

exports.deleteObject = deleteObject;

const load = parseGraphQLSchema => {
  parseGraphQLSchema.graphQLObjectsMutations.create = {
    description: 'The create mutation can be used to create a new object of a certain class.',
    args: {
      className: defaultGraphQLTypes.CLASS_NAME_ATT,
      fields: defaultGraphQLTypes.FIELDS_ATT
    },
    type: new _graphql.GraphQLNonNull(defaultGraphQLTypes.CREATE_RESULT),

    async resolve(_source, args, context) {
      try {
        const {
          className,
          fields
        } = args;
        const {
          config,
          auth,
          info
        } = context;
        return await createObject(className, fields, config, auth, info);
      } catch (e) {
        parseGraphQLSchema.handleError(e);
      }
    }

  };
  parseGraphQLSchema.graphQLObjectsMutations.update = {
    description: 'The update mutation can be used to update an object of a certain class.',
    args: {
      className: defaultGraphQLTypes.CLASS_NAME_ATT,
      objectId: defaultGraphQLTypes.OBJECT_ID_ATT,
      fields: defaultGraphQLTypes.FIELDS_ATT
    },
    type: new _graphql.GraphQLNonNull(defaultGraphQLTypes.UPDATE_RESULT),

    async resolve(_source, args, context) {
      try {
        const {
          className,
          objectId,
          fields
        } = args;
        const {
          config,
          auth,
          info
        } = context;
        return await updateObject(className, objectId, fields, config, auth, info);
      } catch (e) {
        parseGraphQLSchema.handleError(e);
      }
    }

  };
  parseGraphQLSchema.graphQLObjectsMutations.delete = {
    description: 'The delete mutation can be used to delete an object of a certain class.',
    args: {
      className: defaultGraphQLTypes.CLASS_NAME_ATT,
      objectId: defaultGraphQLTypes.OBJECT_ID_ATT
    },
    type: new _graphql.GraphQLNonNull(_graphql.GraphQLBoolean),

    async resolve(_source, args, context) {
      try {
        const {
          className,
          objectId
        } = args;
        const {
          config,
          auth,
          info
        } = context;
        return await deleteObject(className, objectId, config, auth, info);
      } catch (e) {
        parseGraphQLSchema.handleError(e);
      }
    }

  };
  const objectsMutation = new _graphql.GraphQLObjectType({
    name: 'ObjectsMutation',
    description: 'ObjectsMutation is the top level type for objects mutations.',
    fields: parseGraphQLSchema.graphQLObjectsMutations
  });
  parseGraphQLSchema.graphQLTypes.push(objectsMutation);
  parseGraphQLSchema.graphQLMutations.objects = {
    description: 'This is the top level for objects mutations.',
    type: objectsMutation,
    resolve: () => new Object()
  };
};

exports.load = load;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,