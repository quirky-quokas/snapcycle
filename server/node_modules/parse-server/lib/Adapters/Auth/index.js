"use strict";

var _AdapterLoader = _interopRequireDefault(require("../AdapterLoader"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const apple = require('./apple');

const facebook = require('./facebook');

const facebookaccountkit = require('./facebookaccountkit');

const instagram = require('./instagram');

const linkedin = require('./linkedin');

const meetup = require('./meetup');

const google = require('./google');

const github = require('./github');

const twitter = require('./twitter');

const spotify = require('./spotify');

const digits = require('./twitter'); // digits tokens are validated by twitter


const janrainengage = require('./janrainengage');

const janraincapture = require('./janraincapture');

const vkontakte = require('./vkontakte');

const qq = require('./qq');

const wechat = require('./wechat');

const weibo = require('./weibo');

const oauth2 = require('./oauth2');

const phantauth = require('./phantauth');

const anonymous = {
  validateAuthData: () => {
    return Promise.resolve();
  },
  validateAppId: () => {
    return Promise.resolve();
  }
};
const providers = {
  apple,
  facebook,
  facebookaccountkit,
  instagram,
  linkedin,
  meetup,
  google,
  github,
  twitter,
  spotify,
  anonymous,
  digits,
  janrainengage,
  janraincapture,
  vkontakte,
  qq,
  wechat,
  weibo,
  phantauth
};

function authDataValidator(adapter, appIds, options) {
  return function (authData) {
    return adapter.validateAuthData(authData, options).then(() => {
      if (appIds) {
        return adapter.validateAppId(appIds, authData, options);
      }

      return Promise.resolve();
    });
  };
}

function loadAuthAdapter(provider, authOptions) {
  let defaultAdapter = providers[provider];
  const providerOptions = authOptions[provider];

  if (providerOptions && providerOptions.hasOwnProperty('oauth2') && providerOptions['oauth2'] === true) {
    defaultAdapter = oauth2;
  }

  if (!defaultAdapter && !providerOptions) {
    return;
  }

  const adapter = Object.assign({}, defaultAdapter);
  const appIds = providerOptions ? providerOptions.appIds : undefined; // Try the configuration methods

  if (providerOptions) {
    const optionalAdapter = (0, _AdapterLoader.default)(providerOptions, undefined, providerOptions);

    if (optionalAdapter) {
      ['validateAuthData', 'validateAppId'].forEach(key => {
        if (optionalAdapter[key]) {
          adapter[key] = optionalAdapter[key];
        }
      });
    }
  } // TODO: create a new module from validateAdapter() in
  // src/Controllers/AdaptableController.js so we can use it here for adapter
  // validation based on the src/Adapters/Auth/AuthAdapter.js expected class
  // signature.


  if (!adapter.validateAuthData || !adapter.validateAppId) {
    return;
  }

  return {
    adapter,
    appIds,
    providerOptions
  };
}

module.exports = function (authOptions = {}, enableAnonymousUsers = true) {
  let _enableAnonymousUsers = enableAnonymousUsers;

  const setEnableAnonymousUsers = function (enable) {
    _enableAnonymousUsers = enable;
  }; // To handle the test cases on configuration


  const getValidatorForProvider = function (provider) {
    if (provider === 'anonymous' && !_enableAnonymousUsers) {
      return;
    }

    const {
      adapter,
      appIds,
      providerOptions
    } = loadAuthAdapter(provider, authOptions);
    return authDataValidator(adapter, appIds, providerOptions);
  };

  return Object.freeze({
    getValidatorForProvider,
    setEnableAnonymousUsers
  });
};

module.exports.loadAuthAdapter = loadAuthAdapter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BZGFwdGVycy9BdXRoL2luZGV4LmpzIl0sIm5hbWVzIjpbImFwcGxlIiwicmVxdWlyZSIsImZhY2Vib29rIiwiZmFjZWJvb2thY2NvdW50a2l0IiwiaW5zdGFncmFtIiwibGlua2VkaW4iLCJtZWV0dXAiLCJnb29nbGUiLCJnaXRodWIiLCJ0d2l0dGVyIiwic3BvdGlmeSIsImRpZ2l0cyIsImphbnJhaW5lbmdhZ2UiLCJqYW5yYWluY2FwdHVyZSIsInZrb250YWt0ZSIsInFxIiwid2VjaGF0Iiwid2VpYm8iLCJvYXV0aDIiLCJwaGFudGF1dGgiLCJhbm9ueW1vdXMiLCJ2YWxpZGF0ZUF1dGhEYXRhIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ2YWxpZGF0ZUFwcElkIiwicHJvdmlkZXJzIiwiYXV0aERhdGFWYWxpZGF0b3IiLCJhZGFwdGVyIiwiYXBwSWRzIiwib3B0aW9ucyIsImF1dGhEYXRhIiwidGhlbiIsImxvYWRBdXRoQWRhcHRlciIsInByb3ZpZGVyIiwiYXV0aE9wdGlvbnMiLCJkZWZhdWx0QWRhcHRlciIsInByb3ZpZGVyT3B0aW9ucyIsImhhc093blByb3BlcnR5IiwiT2JqZWN0IiwiYXNzaWduIiwidW5kZWZpbmVkIiwib3B0aW9uYWxBZGFwdGVyIiwiZm9yRWFjaCIsImtleSIsIm1vZHVsZSIsImV4cG9ydHMiLCJlbmFibGVBbm9ueW1vdXNVc2VycyIsIl9lbmFibGVBbm9ueW1vdXNVc2VycyIsInNldEVuYWJsZUFub255bW91c1VzZXJzIiwiZW5hYmxlIiwiZ2V0VmFsaWRhdG9yRm9yUHJvdmlkZXIiLCJmcmVlemUiXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7QUFFQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxTQUFELENBQXJCOztBQUNBLE1BQU1DLFFBQVEsR0FBR0QsT0FBTyxDQUFDLFlBQUQsQ0FBeEI7O0FBQ0EsTUFBTUUsa0JBQWtCLEdBQUdGLE9BQU8sQ0FBQyxzQkFBRCxDQUFsQzs7QUFDQSxNQUFNRyxT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LHVCQUF1QixHQUFHLFVBQVNDLE1BQVQsRUFBaUI7QUFDL0NGLElBQUFBLHFCQUFxQixHQUFHRSxNQUF4QjtBQUNELEdBRkQsQ0FGdUUsQ0FLdkU7OztBQUNBLFFBQU1DLHVCQUF1QixHQUFHLFVBQVNqQixRQUFULEVBQW1CO0FBQ2pELFFBQUlBLFFBQVEsS0FBSyxXQUFiLElBQTRCLENBQUNjLHFCQUFqQyxFQUF3RDtBQUN0RDtBQUNEOztBQUVELFVBQU07QUFBRXBCLE1BQUFBLE9BQUY7QUFBV0MsTUFBQUEsTUFBWDtBQUFtQlEsTUFBQUE7QUFBbkIsUUFBdUNKLGVBQWUsQ0FDMURDLFFBRDBELEVBRTFEQyxXQUYwRCxDQUE1RDtBQUtBLFdBQU9SLGlCQUFpQixDQUFDQyxPQUFELEVBQVVDLE1BQVYsRUFBa0JRLGVBQWxCLENBQXhCO0FBQ0QsR0FYRDs7QUFhQSxTQUFPRSxNQUFNLENBQUNhLE1BQVAsQ0FBYztBQUNuQkQsSUFBQUEsdUJBRG1CO0FBRW5CRixJQUFBQTtBQUZtQixHQUFkLENBQVA7QUFJRCxDQXZCRDs7QUF5QkFKLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlYixlQUFmLEdBQWlDQSxlQUFqQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsb2FkQWRhcHRlciBmcm9tICcuLi9BZGFwdGVyTG9hZGVyJztcblxuY29uc3QgYXBwbGUgPSByZXF1aXJlKCcuL2FwcGxlJyk7XG5jb25zdCBmYWNlYm9vayA9IHJlcXVpcmUoJy4vZmFjZWJvb2snKTtcbmNvbnN0IGZhY2Vib29rYWNjb3VudGtpdCA9IHJlcXVpcmUoJy4vZmFjZWJvb2thY2NvdW50a2l0Jyk7XG5jb25zdCBpbnN0YWdyYW0gPSByZXF1aXJlKCcuL2luc3RhZ3JhbScpO1xuY29uc3QgbGlua2VkaW4gPSByZXF1aXJlKCcuL2xpbmtlZGluJyk7XG5jb25zdCBtZWV0dXAgPSByZXF1aXJlKCcuL21lZXR1cCcpO1xuY29uc3QgZ29vZ2xlID0gcmVxdWlyZSgnLi9nb29nbGUnKTtcbmNvbnN0IGdpdGh1YiA9IHJlcXVpcmUoJy4vZ2l0aHViJyk7XG5jb25zdCB0d2l0dGVyID0gcmVxdWlyZSgnLi90d2l0dGVyJyk7XG5jb25zdCBzcG90aWZ5ID0gcmVxdWlyZSgnLi9zcG90aWZ5Jyk7XG5jb25zdCBkaWdpdHMgPSByZXF1aXJlKCcuL3R3aXR0ZXInKTsgLy8gZGlnaXRzIHRva2VucyBhcmUgdmFsaWRhdGVkIGJ5IHR3aXR0ZXJcbmNvbnN0IGphbnJhaW5lbmdhZ2UgPSByZXF1aXJlKCcuL2phbnJhaW5lbmdhZ2UnKTtcbmNvbnN0IGphbnJhaW5jYXB0dXJlID0gcmVxdWlyZSgnLi9qYW5yYWluY2FwdHVyZScpO1xuY29uc3QgdmtvbnRha3RlID0gcmVxdWlyZSgnLi92a29udGFrdGUnKTtcbmNvbnN0IHFxID0gcmVxdWlyZSgnLi9xcScpO1xuY29uc3Qgd2VjaGF0ID0gcmVxdWlyZSgnLi93ZWNoYXQnKTtcbmNvbnN0IHdlaWJvID0gcmVxdWlyZSgnLi93ZWlibycpO1xuY29uc3Qgb2F1dGgyID0gcmVxdWlyZSgnLi9vYXV0aDInKTtcbmNvbnN0IHBoYW50YXV0aCA9IHJlcXVpcmUoJy4vcGhhbnRhdXRoJyk7XG5cbmNvbnN0IGFub255bW91cyA9IHtcbiAgdmFsaWRhdGVBdXRoRGF0YTogKCkgPT4ge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfSxcbiAgdmFsaWRhdGVBcHBJZDogKCkgPT4ge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfSxcbn07XG5cbmNvbnN0IHByb3ZpZGVycyA9IHtcbiAgYXBwbGUsXG4gIGZhY2Vib29rLFxuICBmYWNlYm9va2FjY291bnRraXQsXG4gIGluc3RhZ3JhbSxcbiAgbGlua2VkaW4sXG4gIG1lZXR1cCxcbiAgZ29vZ2xlLFxuICBnaXRodWIsXG4gIHR3aXR0ZXIsXG4gIHNwb3RpZnksXG4gIGFub255bW91cyxcbiAgZGlnaXRzLFxuICBqYW5yYWluZW5nYWdlLFxuICBqYW5yYWluY2FwdHVyZSxcbiAgdmtvbnRha3RlLFxuICBxcSxcbiAgd2VjaGF0LFxuICB3ZWlibyxcbiAgcGhhbnRhdXRoLFxufTtcblxuZnVuY3Rpb24gYXV0aERhdGFWYWxpZGF0b3IoYWRhcHRlciwgYXBwSWRzLCBvcHRpb25zKSB7XG4gIHJldHVybiBmdW5jdGlvbihhdXRoRGF0YSkge1xuICAgIHJldHVybiBhZGFwdGVyLnZhbGlkYXRlQXV0aERhdGEoYXV0aERhdGEsIG9wdGlvbnMpLnRoZW4oKCkgPT4ge1xuICAgICAgaWYgKGFwcElkcykge1xuICAgICAgICByZXR1cm4gYWRhcHRlci52YWxpZGF0ZUFwcElkKGFwcElkcywgYXV0aERhdGEsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH0pO1xuICB9O1xufVxuXG5mdW5jdGlvbiBsb2FkQXV0aEFkYXB0ZXIocHJvdmlkZXIsIGF1dGhPcHRpb25zKSB7XG4gIGxldCBkZWZhdWx0QWRhcHRlciA9IHByb3ZpZGVyc1twcm92aWRlcl07XG4gIGNvbnN0IHByb3ZpZGVyT3B0aW9ucyA9IGF1dGhPcHRpb25zW3Byb3ZpZGVyXTtcbiAgaWYgKFxuICAgIHByb3ZpZGVyT3B0aW9ucyAmJlxuICAgIHByb3ZpZGVyT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnb2F1dGgyJykgJiZcbiAgICBwcm92aWRlck9wdGlvbnNbJ29hdXRoMiddID09PSB0cnVlXG4gICkge1xuICAgIGRlZmF1bHRBZGFwdGVyID0gb2F1dGgyO1xuICB9XG5cbiAgaWYgKCFkZWZhdWx0QWRhcHRlciAmJiAhcHJvdmlkZXJPcHRpb25zKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgYWRhcHRlciA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRBZGFwdGVyKTtcbiAgY29uc3QgYXBwSWRzID0gcHJvdmlkZXJPcHRpb25zID8gcHJvdmlkZXJPcHRpb25zLmFwcElkcyA6IHVuZGVmaW5lZDtcblxuICAvLyBUcnkgdGhlIGNvbmZpZ3VyYXRpb24gbWV0aG9kc1xuICBpZiAocHJvdmlkZXJPcHRpb25zKSB7XG4gICAgY29uc3Qgb3B0aW9uYWxBZGFwdGVyID0gbG9hZEFkYXB0ZXIoXG4gICAgICBwcm92aWRlck9wdGlvbnMsXG4gICAgICB1bmRlZmluZWQsXG4gICAgICBwcm92aWRlck9wdGlvbnNcbiAgICApO1xuICAgIGlmIChvcHRpb25hbEFkYXB0ZXIpIHtcbiAgICAgIFsndmFsaWRhdGVBdXRoRGF0YScsICd2YWxpZGF0ZUFwcElkJ10uZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBpZiAob3B0aW9uYWxBZGFwdGVyW2tleV0pIHtcbiAgICAgICAgICBhZGFwdGVyW2tleV0gPSBvcHRpb25hbEFkYXB0ZXJba2V5XTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLy8gVE9ETzogY3JlYXRlIGEgbmV3IG1vZHVsZSBmcm9tIHZhbGlkYXRlQWRhcHRlcigpIGluXG4gIC8vIHNyYy9Db250cm9sbGVycy9BZGFwdGFibGVDb250cm9sbGVyLmpzIHNvIHdlIGNhbiB1c2UgaXQgaGVyZSBmb3IgYWRhcHRlclxuICAvLyB2YWxpZGF0aW9uIGJhc2VkIG9uIHRoZSBzcmMvQWRhcHRlcnMvQXV0aC9BdXRoQWRhcHRlci5qcyBleHBlY3RlZCBjbGFzc1xuICAvLyBzaWduYXR1cmUuXG4gIGlmICghYWRhcHRlci52YWxpZGF0ZUF1dGhEYXRhIHx8ICFhZGFwdGVyLnZhbGlkYXRlQXBwSWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICByZXR1cm4geyBhZGFwdGVyLCBhcHBJZHMsIHByb3ZpZGVyT3B0aW9ucyB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGF1dGhPcHRpb25zID0ge30sIGVuYWJsZUFub255bW91c1VzZXJzID0gdHJ1ZSkge1xuICBsZXQgX2VuYWJsZUFub255bW91c1VzZXJzID0gZW5hYmxlQW5vbnltb3VzVXNlcnM7XG4gIGNvbnN0IHNldEVuYWJsZUFub255bW91c1VzZXJzID0gZnVuY3Rpb24oZW5hYmxlKSB7XG4gICAgX2VuYWJsZUFub255bW91c1VzZXJzID0gZW5hYmxlO1xuICB9O1xuICAvLyBUbyBoYW5kbGUgdGhlIHRlc3QgY2FzZXMgb24gY29uZmlndXJhdGlvblxuICBjb25zdCBnZXRWYWxpZGF0b3JGb3JQcm92aWRlciA9IGZ1bmN0aW9uKHByb3ZpZGVyKSB7XG4gICAgaWYgKHByb3ZpZGVyID09PSAnYW5vbnltb3VzJyAmJiAhX2VuYWJsZUFub255bW91c1VzZXJzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgeyBhZGFwdGVyLCBhcHBJZHMsIHByb3ZpZGVyT3B0aW9ucyB9ID0gbG9hZEF1dGhBZGFwdGVyKFxuICAgICAgcHJvdmlkZXIsXG4gICAgICBhdXRoT3B0aW9uc1xuICAgICk7XG5cbiAgICByZXR1cm4gYXV0aERhdGFWYWxpZGF0b3IoYWRhcHRlciwgYXBwSWRzLCBwcm92aWRlck9wdGlvbnMpO1xuICB9O1xuXG4gIHJldHVybiBPYmplY3QuZnJlZXplKHtcbiAgICBnZXRWYWxpZGF0b3JGb3JQcm92aWRlcixcbiAgICBzZXRFbmFibGVBbm9ueW1vdXNVc2VycyxcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5sb2FkQXV0aEFkYXB0ZXIgPSBsb2FkQXV0aEFkYXB0ZXI7XG4iXX0=