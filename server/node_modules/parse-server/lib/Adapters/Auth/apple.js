"use strict";

const Parse = require('parse/node').Parse;

const httpsRequest = require('./httpsRequest');

const NodeRSA = require('node-rsa');

const jwt = require('jsonwebtoken');

const TOKEN_ISSUER = 'https://appleid.apple.com';
let currentKey;

const getApplePublicKey = async () => {
  let data;

  try {
    data = await httpsRequest.get('https://appleid.apple.com/auth/keys');
  } catch (e) {
    if (currentKey) {
      return currentKey;
    }

    throw e;
  }

  const key = data.keys[0];
  const pubKey = new NodeRSA();
  pubKey.importKey({
    n: Buffer.from(key.n, 'base64'),
    e: Buffer.from(key.e, 'base64')
  }, 'components-public');
  currentKey = pubKey.exportKey(['public']);
  return currentKey;
};

const verifyIdToken = async (token, clientID) => {
  if (!token) {
    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'id token is invalid for this user.');
  }

  const applePublicKey = await getApplePublicKey();
  const jwtClaims = jwt.verify(token, applePublicKey, {
    algorithms: 'RS256'
  });

  if (jwtClaims.iss !== TOKEN_ISSUER) {
    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, `id token not issued by correct OpenID provider - expected: ${TOKEN_ISSUER} | from: ${jwtClaims.iss}`);
  }

  if (clientID !== undefined && jwtClaims.aud !== clientID) {
    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, `jwt aud parameter does not include this client - is: ${jwtClaims.aud} | expected: ${clientID}`);
  }

  return jwtClaims;
}; // Returns a promise that fulfills if this id token is valid


function validateAuthData(authData, options = {}) {
  return verifyIdToken(authData.id, options.client_id);
} // Returns a promise that fulfills if this app id is valid.


function validateAppId() {
  return Promise.resolve();
}

module.exports = {
  validateAppId,
  validateAuthData
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BZGFwdGVycy9BdXRoL2FwcGxlLmpzIl0sIm5hbWVzIjpbIlBhcnNlIiwicmVxdWlyZSIsImh0dHBzUmVxdWVzdCIsIk5vZGVSU0EiLCJqd3QiLCJUT0tFTl9JU1NVRVIiLCJjdXJyZW50S2V5IiwiZ2V0QXBwbGVQdWJsaWNLZXkiLCJkYXRhIiwiZ2V0IiwiZSIsImtleSIsImtleXMiLCJwdWJLZXkiLCJpbXBvcnRLZXkiLCJuIiwiQnVmZmVyIiwiZnJvbSIsImV4cG9ydEtleSIsInZlcmlmeUlkVG9rZW4iLCJ0b2tlbiIsImNsaWVudElEIiwiRXJyb3IiLCJPQkpFQ1RfTk9UX0ZPVU5EIiwiYXBwbGVQdWJsaWNLZXkiLCJqd3RDbGFpbXMiLCJ2ZXJpZnkiLCJhbGdvcml0aG1zIiwiaXNzIiwidW5kZWZpbmVkIiwiYXVkIiwidmFsaWRhdGVBdXRoRGF0YSIsImF1dGhEYXRhIiwib3B0aW9ucyIsImlkIiwiY2xpZW50X2lkIiwidmFsaWRhdGVBcHBJZCIsIlByb21pc2UiLCJyZXNvbHZlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxZQUFELENBQVAsQ0FBc0JELEtBQXBDOztBQUNBLE1BQU1FLFlBQVksR0FBR0QsT0FBTyxDQUFDLGdCQUFELENBQTVCOztBQUNBLE1BQU1FLE9BQU8sR0FBR0YsT0FBTyxDQUFDLFVBQUQsQ0FBdkI7O0FBQ0EsTUFBTUcsR0FBRyxHQUFHSCxPQUFPLENBQUMsY0FBRCxDQUFuQjs7QUFFQSxNQUFNSSxZQUFZLEdBQUcsMkJBQXJCO0FBRUEsSUFBSUMsVUFBSjs7QUFFQSxNQUFNQyxpQkFBaUIsR0FBRyxZQUFZO0FBQ3BDLE1BQUlDLElBQUo7O0FBQ0EsTUFBSTtBQUNGQSxJQUFBQSxJQUFJLEdBQUcsTUFBTU4sWUFBWSxDQUFDTyxHQUFiLENBQWlCLHFDQUFqQixDQUFiO0FBQ0QsR0FGRCxDQUVFLE9BQU9DLENBQVAsRUFBVTtBQUNWLFFBQUlKLFVBQUosRUFBZ0I7QUFDZCxhQUFPQSxVQUFQO0FBQ0Q7O0FBQ0QsVUFBTUksQ0FBTjtBQUNEOztBQUVELFFBQU1DLEdBQUcsR0FBR0gsSUFBSSxDQUFDSSxJQUFMLENBQVUsQ0FBVixDQUFaO0FBRUEsUUFBTUMsTUFBTSxHQUFHLElBQUlWLE9BQUosRUFBZjtBQUNBVSxFQUFBQSxNQUFNLENBQUNDLFNBQVAsQ0FDRTtBQUFFQyxJQUFBQSxDQUFDLEVBQUVDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZTixHQUFHLENBQUNJLENBQWhCLEVBQW1CLFFBQW5CLENBQUw7QUFBbUNMLElBQUFBLENBQUMsRUFBRU0sTUFBTSxDQUFDQyxJQUFQLENBQVlOLEdBQUcsQ0FBQ0QsQ0FBaEIsRUFBbUIsUUFBbkI7QUFBdEMsR0FERixFQUVFLG1CQUZGO0FBSUFKLEVBQUFBLFVBQVUsR0FBR08sTUFBTSxDQUFDSyxTQUFQLENBQWlCLENBQUMsUUFBRCxDQUFqQixDQUFiO0FBQ0EsU0FBT1osVUFBUDtBQUNELENBcEJEOztBQXNCQSxNQUFNYSxhQUFhLEdBQUcsT0FBT0MsS0FBUCxFQUFjQyxRQUFkLEtBQTJCO0FBQy9DLE1BQUksQ0FBQ0QsS0FBTCxFQUFZO0FBQ1YsVUFBTSxJQUFJcEIsS0FBSyxDQUFDc0IsS0FBVixDQUNKdEIsS0FBSyxDQUFDc0IsS0FBTixDQUFZQyxnQkFEUixFQUVKLG9DQUZJLENBQU47QUFJRDs7QUFDRCxRQUFNQyxjQUFjLEdBQUcsTUFBTWpCLGlCQUFpQixFQUE5QztBQUNBLFFBQU1rQixTQUFTLEdBQUdyQixHQUFHLENBQUNzQixNQUFKLENBQVdOLEtBQVgsRUFBa0JJLGNBQWxCLEVBQWtDO0FBQUVHLElBQUFBLFVBQVUsRUFBRTtBQUFkLEdBQWxDLENBQWxCOztBQUVBLE1BQUlGLFNBQVMsQ0FBQ0csR0FBVixLQUFrQnZCLFlBQXRCLEVBQW9DO0FBQ2xDLFVBQU0sSUFBSUwsS0FBSyxDQUFDc0IsS0FBVixDQUNKdEIsS0FBSyxDQUFDc0IsS0FBTixDQUFZQyxnQkFEUixFQUVILDhEQUE2RGxCLFlBQWEsWUFBV29CLFNBQVMsQ0FBQ0csR0FBSSxFQUZoRyxDQUFOO0FBSUQ7O0FBQ0QsTUFBSVAsUUFBUSxLQUFLUSxTQUFiLElBQTBCSixTQUFTLENBQUNLLEdBQVYsS0FBa0JULFFBQWhELEVBQTBEO0FBQ3hELFVBQU0sSUFBSXJCLEtBQUssQ0FBQ3NCLEtBQVYsQ0FDSnRCLEtBQUssQ0FBQ3NCLEtBQU4sQ0FBWUMsZ0JBRFIsRUFFSCx3REFBdURFLFNBQVMsQ0FBQ0ssR0FBSSxnQkFBZVQsUUFBUyxFQUYxRixDQUFOO0FBSUQ7O0FBQ0QsU0FBT0ksU0FBUDtBQUNELENBdkJELEMsQ0F5QkE7OztBQUNBLFNBQVNNLGdCQUFULENBQTBCQyxRQUExQixFQUFvQ0MsT0FBTyxHQUFHLEVBQTlDLEVBQWtEO0FBQ2hELFNBQU9kLGFBQWEsQ0FBQ2EsUUFBUSxDQUFDRSxFQUFWLEVBQWNELE9BQU8sQ0FBQ0UsU0FBdEIsQ0FBcEI7QUFDRCxDLENBRUQ7OztBQUNBLFNBQVNDLGFBQVQsR0FBeUI7QUFDdkIsU0FBT0MsT0FBTyxDQUFDQyxPQUFSLEVBQVA7QUFDRDs7QUFFREMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2ZKLEVBQUFBLGFBRGU7QUFFZkwsRUFBQUE7QUFGZSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFBhcnNlID0gcmVxdWlyZSgncGFyc2Uvbm9kZScpLlBhcnNlO1xuY29uc3QgaHR0cHNSZXF1ZXN0ID0gcmVxdWlyZSgnLi9odHRwc1JlcXVlc3QnKTtcbmNvbnN0IE5vZGVSU0EgPSByZXF1aXJlKCdub2RlLXJzYScpO1xuY29uc3Qgand0ID0gcmVxdWlyZSgnanNvbndlYnRva2VuJyk7XG5cbmNvbnN0IFRPS0VOX0lTU1VFUiA9ICdodHRwczovL2FwcGxlaWQuYXBwbGUuY29tJztcblxubGV0IGN1cnJlbnRLZXk7XG5cbmNvbnN0IGdldEFwcGxlUHVibGljS2V5ID0gYXN5bmMgKCkgPT4ge1xuICBsZXQgZGF0YTtcbiAgdHJ5IHtcbiAgICBkYXRhID0gYXdhaXQgaHR0cHNSZXF1ZXN0LmdldCgnaHR0cHM6Ly9hcHBsZWlkLmFwcGxlLmNvbS9hdXRoL2tleXMnKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChjdXJyZW50S2V5KSB7XG4gICAgICByZXR1cm4gY3VycmVudEtleTtcbiAgICB9XG4gICAgdGhyb3cgZTtcbiAgfVxuXG4gIGNvbnN0IGtleSA9IGRhdGEua2V5c1swXTtcblxuICBjb25zdCBwdWJLZXkgPSBuZXcgTm9kZVJTQSgpO1xuICBwdWJLZXkuaW1wb3J0S2V5KFxuICAgIHsgbjogQnVmZmVyLmZyb20oa2V5Lm4sICdiYXNlNjQnKSwgZTogQnVmZmVyLmZyb20oa2V5LmUsICdiYXNlNjQnKSB9LFxuICAgICdjb21wb25lbnRzLXB1YmxpYydcbiAgKTtcbiAgY3VycmVudEtleSA9IHB1YktleS5leHBvcnRLZXkoWydwdWJsaWMnXSk7XG4gIHJldHVybiBjdXJyZW50S2V5O1xufTtcblxuY29uc3QgdmVyaWZ5SWRUb2tlbiA9IGFzeW5jICh0b2tlbiwgY2xpZW50SUQpID0+IHtcbiAgaWYgKCF0b2tlbikge1xuICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihcbiAgICAgIFBhcnNlLkVycm9yLk9CSkVDVF9OT1RfRk9VTkQsXG4gICAgICAnaWQgdG9rZW4gaXMgaW52YWxpZCBmb3IgdGhpcyB1c2VyLidcbiAgICApO1xuICB9XG4gIGNvbnN0IGFwcGxlUHVibGljS2V5ID0gYXdhaXQgZ2V0QXBwbGVQdWJsaWNLZXkoKTtcbiAgY29uc3Qgand0Q2xhaW1zID0gand0LnZlcmlmeSh0b2tlbiwgYXBwbGVQdWJsaWNLZXksIHsgYWxnb3JpdGhtczogJ1JTMjU2JyB9KTtcblxuICBpZiAoand0Q2xhaW1zLmlzcyAhPT0gVE9LRU5fSVNTVUVSKSB7XG4gICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFxuICAgICAgUGFyc2UuRXJyb3IuT0JKRUNUX05PVF9GT1VORCxcbiAgICAgIGBpZCB0b2tlbiBub3QgaXNzdWVkIGJ5IGNvcnJlY3QgT3BlbklEIHByb3ZpZGVyIC0gZXhwZWN0ZWQ6ICR7VE9LRU5fSVNTVUVSfSB8IGZyb206ICR7and0Q2xhaW1zLmlzc31gXG4gICAgKTtcbiAgfVxuICBpZiAoY2xpZW50SUQgIT09IHVuZGVmaW5lZCAmJiBqd3RDbGFpbXMuYXVkICE9PSBjbGllbnRJRCkge1xuICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihcbiAgICAgIFBhcnNlLkVycm9yLk9CSkVDVF9OT1RfRk9VTkQsXG4gICAgICBgand0IGF1ZCBwYXJhbWV0ZXIgZG9lcyBub3QgaW5jbHVkZSB0aGlzIGNsaWVudCAtIGlzOiAke2p3dENsYWltcy5hdWR9IHwgZXhwZWN0ZWQ6ICR7Y2xpZW50SUR9YFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGp3dENsYWltcztcbn07XG5cbi8vIFJldHVybnMgYSBwcm9taXNlIHRoYXQgZnVsZmlsbHMgaWYgdGhpcyBpZCB0b2tlbiBpcyB2YWxpZFxuZnVuY3Rpb24gdmFsaWRhdGVBdXRoRGF0YShhdXRoRGF0YSwgb3B0aW9ucyA9IHt9KSB7XG4gIHJldHVybiB2ZXJpZnlJZFRva2VuKGF1dGhEYXRhLmlkLCBvcHRpb25zLmNsaWVudF9pZCk7XG59XG5cbi8vIFJldHVybnMgYSBwcm9taXNlIHRoYXQgZnVsZmlsbHMgaWYgdGhpcyBhcHAgaWQgaXMgdmFsaWQuXG5mdW5jdGlvbiB2YWxpZGF0ZUFwcElkKCkge1xuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB2YWxpZGF0ZUFwcElkLFxuICB2YWxpZGF0ZUF1dGhEYXRhLFxufTtcbiJdfQ==